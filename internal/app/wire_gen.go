// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/ix-pay/ixpay-pro/internal/app/controller"
	"github.com/ix-pay/ixpay-pro/internal/config"
	"github.com/ix-pay/ixpay-pro/internal/domain/service"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/auth"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/database"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/logger"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/redis"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/repository"
	"github.com/ix-pay/ixpay-pro/internal/infrastructure/task"

	_ "github.com/ix-pay/ixpay-pro/docs"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序
// wire会根据ProviderSet自动生成依赖注入代码
func InitializeApp() (*Application, error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, err
	}
	loggerLogger := logger.NewLogger(configConfig)
	postgresDB, err := database.NewPostgresDB(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	jwtAuth, err := auth.NewJWTAuth(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	redisClient, err := redis.NewRedisClient(configConfig, loggerLogger)
	if err != nil {
		return nil, err
	}
	permissionManager := auth.NewPermissionManager(redisClient, loggerLogger)
	userRepository := repository.NewUserRepository(postgresDB)
	wechatService := service.NewWechatService(configConfig, loggerLogger)
	userService := service.NewUserService(userRepository, jwtAuth, loggerLogger, wechatService)
	userController := controller.NewUserController(userService, loggerLogger)
	paymentRepository := repository.NewPaymentRepository(postgresDB)
	taskManager := task.NewTaskManager(loggerLogger)
	paymentService := service.NewPaymentService(paymentRepository, loggerLogger, wechatService, taskManager)
	paymentController := controller.NewPaymentController(paymentService, loggerLogger)
	taskController := controller.NewTaskController(taskManager, loggerLogger)
	application, err := NewApplication(configConfig, loggerLogger, postgresDB, jwtAuth, permissionManager, userController, paymentController, taskController)
	if err != nil {
		return nil, err
	}
	return application, nil
}

// wire.go:

// 定义依赖注入的提供者
var ProviderSet = wire.NewSet(config.LoadConfig, logger.NewLogger, database.NewPostgresDB, redis.NewRedisClient, auth.NewJWTAuth, auth.NewPermissionManager, task.NewTaskManager, repository.NewUserRepository, repository.NewPaymentRepository, service.NewUserService, service.NewWechatService, service.NewPaymentService, controller.NewUserController, controller.NewPaymentController, controller.NewTaskController, NewApplication)
